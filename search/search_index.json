{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Analog / Mixed-Signal IC Engineer PhD candidate at NOVA-UNL / TU Delft Welcome. This is a personal website built on top of MkDocs . Hi! My name is Diogo Andr\u00e9. I'm currently pursuing a PhD in Nanoelectronics under a mixed-scholarship at NOVA University of Lisbon, School of Science and Technology (Monte da Caparica, Portugal), and TU Delft, Bioelectronics Group (Delft, The Netherlands). I'm specialising in Analog / Mixed-Signal IC Design, focusing on Analog Front-Ends and Quantizer ASIC Interfaces for Ultrasound Imaging Transducer Arrays. I am also a big fan of using C-lang and Python to develop my own tools for automatic layout design and custom extractors for parasitic passive lumped elements and crosstalk between signal lines. Feel free to contact me! \ud83d\udcc2 Personal Info \ud83d\udcc5 Nov 19, 1998 \ud83c\udfe0 R. Bento Gon\u00e7alves 68, 2835-674 Barreiro, Portugal E-mail: \ud83d\udce7 das.dias@campus.fct.unl.pt \ud83d\udce7 ddias@tudelft.nl \ud83d\udd17 Google Scholar \ud83d\udd17 GitHub \ud83d\udd17 LinkedIn \ud83c\udf93 Education MSc. in Electrical and Computers Engineering NOVA University of Lisbon (Sep 2019 - Dec 2021) Grade: 17/20 BSc. in Electrical and Computers Engineering NOVA University of Lisbon (Sep 2016 - Jul 2019) Grade: 17/20 \ud83c\udfe2 Experience CMOS Process Development Kits (PDKs) 28 nm (HPC+) TSMC PDK , 130 nm UMC PDK PhD Candidate (ASICs For Ultrasound Image-Guided Vagus Nerve Stimulation) NOVA University of Lisbon, Delft University of Technology (May 2022 - Ongoing) Nyquist Data-Rate Converters Course (Teaching Assistant) Delft University of Technology (Feb - May 2024) Erasmus+ Traineeship Student Delft University of Technology (Feb - Jun 2021) - Master Thesis Dissertation Electronics II Course (Teaching Assistant) NOVA University of Lisbon (Sep - Dec 2019) \ud83d\udcda Research A PVT-Robust Open-loop Gm-Ratio\u00d7 16 Gain Residue Amplifier for> 1 GS/s Pipelined ADCs CTS, LASI, NOVA University of Lisbon (Dec 2023) - IEEE ISCAS \u201924 Publication A Parasitic Resistance Extraction Tool Leveraged by Image Processing PDEEC, NOVA University of Lisbon (Dec 2021) - IEEE ISCAS \u201922 Publication Preliminary Assessment of an Ultrasonic Level Sensor for the Calorimetric Measurement of AC Losses in Superconducting Devices CTS, NOVA University of Lisbon (Sep 2020 - Sep 2021) - YEF-ECE \u201922 Publication Ultrasound-based Cryogenic Monitoring System for Superconducting Systems CTS, NOVA University of Lisbon (Sep 2020 - Sep 2021) - EUCAS \u201921 Publication \ud83d\udee0\ufe0f Technical Skills & Tools Cadence - Analog / Mixed-Signal Base-Band & RF IC Design Cadence / KLayout / Python - IC Layout Design Xillinx ISE - Digital IC Design, Verilog MATLAB, Python, C, Verilog MS Office, Git, LaTeX (Mac) OSX, Linux(Ubuntu/CentOS), Windows \ud83c\udfc6 Certifications Artificial Intelligence Course Samsung Innovation Campus at NOVA University of Lisbon (Jun - Sep 2021) \ud83d\udd2c Projects novaad Open-Source Software Contribution - A Python tool for Look-up Table (LUT)-based Gm/Id Analog IC design. gdsfactory/gplugins/spice Open-Source Software Contribution - A Python library for converting between YAML Markup language and SPICE schematic netlist description language. This tool explores the use of modern computer Markup language YAML to represent schematic netlists, allowing for integrated photonic and electronic schematics to co-exist and relate to each other in a single human-readable file. YAML has also readily available Serializer/Deserializer parsers for most common programming languages (C++, C, Python, Ruby, Go, ...). Important Note: both the base source code for the gdsfactory/gplugins/spice and gdsfactory/gplugins/vlsir tools were initially aggregated into a personal repository of mine - parcirc . gdsfactory/gplugins/vlsir Open-Source Software Contribution - A Python library for converting between Klayout's DB Netlist format and other electrical schematic file formats (SPICE, Spectre, Xyce) - More about the tool at: gdsfactory.github.io/gplugins/notebooks/vlsir_netlist This work is supported and inspired by Dan Fritchman's VLSIR Tools work, linking the way PDK information is represented in the older, closed-source custom filesystem formats to new, open-source, supported and maintained file and binary formats that allow for a greater information compression and inter-programming language data-structure sharing and interpretation through the use of Google's Protobuf data interface protocol. I highly encourage you to read more about Dan Fritchman's work . Master Thesis Dissertation NOVA University of Lisbon & Delft University of Technology (Sep 2020 - Dec 2021) - \"On the Use of Image Processing for 3D Parasitic Resistance Networks Extraction in Integrated Circuits\" - Grade: 19/20 Zero-IF FSK RF Receiver Analog Front-End NOVA University of Lisbon (Sep - Dec 2020) - Designed in 0.13\u00b5m (MM/RF) UMC technology 120 dB Gain, Low-Voltage (0.9 V supply) Operational Transconductance Amplifier NOVA University of Lisbon (Sep - Nov 2020) - Designed in 0.13\u00b5m (MM/RF) UMC technology 66 dB Gain, 100 MHz GBW Fully-Differential Hybrid Telescopic-Folded Cascode Amplifier NOVA University of Lisbon (Nov - Dec 2019) - Designed in 0.13\u00b5m (MM/RF) UMC technology \ud83c\udf0d Languages Portuguese: \u25cb \u25cb \u25cb \u25cb \u25cb English: \u25cb \u25cb \u25cb \u25cb \u25cb Spanish: \u25cb \u25cb \u25cb Dutch: \u25cb \u25cb \ud83c\udfad Extra-Curricular Activities Pedagogical Committee Representative NOVA University of Lisbon (Nov 2019 - Jul 2021) - Electrical and Computers Engineering Department Volunteer Work \u2013 Refood Telheiras, Lisbon Sep - Dec 2019 - Redistribution of food waste \ud83c\udfa8 Hobbies Reading and watching documentaries about History Electric Bass Guitar Half-Marathon Running Contributing to open-source EDA-CAD software","title":"Home"},{"location":"#personal-info","text":"\ud83d\udcc5 Nov 19, 1998 \ud83c\udfe0 R. Bento Gon\u00e7alves 68, 2835-674 Barreiro, Portugal E-mail: \ud83d\udce7 das.dias@campus.fct.unl.pt \ud83d\udce7 ddias@tudelft.nl \ud83d\udd17 Google Scholar \ud83d\udd17 GitHub \ud83d\udd17 LinkedIn","title":"\ud83d\udcc2 Personal Info"},{"location":"#education","text":"","title":"\ud83c\udf93 Education"},{"location":"#msc-in-electrical-and-computers-engineering","text":"NOVA University of Lisbon (Sep 2019 - Dec 2021) Grade: 17/20","title":"MSc. in Electrical and Computers Engineering"},{"location":"#bsc-in-electrical-and-computers-engineering","text":"NOVA University of Lisbon (Sep 2016 - Jul 2019) Grade: 17/20","title":"BSc. in Electrical and Computers Engineering"},{"location":"#experience","text":"","title":"\ud83c\udfe2 Experience"},{"location":"#cmos-process-development-kits-pdks","text":"28 nm (HPC+) TSMC PDK , 130 nm UMC PDK","title":"CMOS Process Development Kits (PDKs)"},{"location":"#phd-candidate-asics-for-ultrasound-image-guided-vagus-nerve-stimulation","text":"NOVA University of Lisbon, Delft University of Technology (May 2022 - Ongoing)","title":"PhD Candidate (ASICs For Ultrasound Image-Guided Vagus Nerve Stimulation)"},{"location":"#nyquist-data-rate-converters-course-teaching-assistant","text":"Delft University of Technology (Feb - May 2024)","title":"Nyquist Data-Rate Converters Course (Teaching Assistant)"},{"location":"#erasmus-traineeship-student","text":"Delft University of Technology (Feb - Jun 2021) - Master Thesis Dissertation","title":"Erasmus+ Traineeship Student"},{"location":"#electronics-ii-course-teaching-assistant","text":"NOVA University of Lisbon (Sep - Dec 2019)","title":"Electronics II Course (Teaching Assistant)"},{"location":"#research","text":"","title":"\ud83d\udcda Research"},{"location":"#a-pvt-robust-open-loop-gm-ratio-16-gain-residue-amplifier-for-1-gss-pipelined-adcs","text":"CTS, LASI, NOVA University of Lisbon (Dec 2023) - IEEE ISCAS \u201924 Publication","title":"A PVT-Robust Open-loop Gm-Ratio\u00d7 16 Gain Residue Amplifier for&gt; 1 GS/s Pipelined ADCs"},{"location":"#a-parasitic-resistance-extraction-tool-leveraged-by-image-processing","text":"PDEEC, NOVA University of Lisbon (Dec 2021) - IEEE ISCAS \u201922 Publication","title":"A Parasitic Resistance Extraction Tool Leveraged by Image Processing"},{"location":"#preliminary-assessment-of-an-ultrasonic-level-sensor-for-the-calorimetric-measurement-of-ac-losses-in-superconducting-devices","text":"CTS, NOVA University of Lisbon (Sep 2020 - Sep 2021) - YEF-ECE \u201922 Publication","title":"Preliminary Assessment of an Ultrasonic Level Sensor for the Calorimetric Measurement of AC Losses in Superconducting Devices"},{"location":"#ultrasound-based-cryogenic-monitoring-system-for-superconducting-systems","text":"CTS, NOVA University of Lisbon (Sep 2020 - Sep 2021) - EUCAS \u201921 Publication","title":"Ultrasound-based Cryogenic Monitoring System for Superconducting Systems"},{"location":"#technical-skills-tools","text":"Cadence - Analog / Mixed-Signal Base-Band & RF IC Design Cadence / KLayout / Python - IC Layout Design Xillinx ISE - Digital IC Design, Verilog MATLAB, Python, C, Verilog MS Office, Git, LaTeX (Mac) OSX, Linux(Ubuntu/CentOS), Windows","title":"\ud83d\udee0\ufe0f Technical Skills &amp; Tools"},{"location":"#certifications","text":"","title":"\ud83c\udfc6 Certifications"},{"location":"#artificial-intelligence-course","text":"Samsung Innovation Campus at NOVA University of Lisbon (Jun - Sep 2021)","title":"Artificial Intelligence Course"},{"location":"#projects","text":"","title":"\ud83d\udd2c Projects"},{"location":"#novaad","text":"Open-Source Software Contribution - A Python tool for Look-up Table (LUT)-based Gm/Id Analog IC design.","title":"novaad"},{"location":"#gdsfactorygpluginsspice","text":"Open-Source Software Contribution - A Python library for converting between YAML Markup language and SPICE schematic netlist description language. This tool explores the use of modern computer Markup language YAML to represent schematic netlists, allowing for integrated photonic and electronic schematics to co-exist and relate to each other in a single human-readable file. YAML has also readily available Serializer/Deserializer parsers for most common programming languages (C++, C, Python, Ruby, Go, ...). Important Note: both the base source code for the gdsfactory/gplugins/spice and gdsfactory/gplugins/vlsir tools were initially aggregated into a personal repository of mine - parcirc .","title":"gdsfactory/gplugins/spice"},{"location":"#gdsfactorygpluginsvlsir","text":"Open-Source Software Contribution - A Python library for converting between Klayout's DB Netlist format and other electrical schematic file formats (SPICE, Spectre, Xyce) - More about the tool at: gdsfactory.github.io/gplugins/notebooks/vlsir_netlist This work is supported and inspired by Dan Fritchman's VLSIR Tools work, linking the way PDK information is represented in the older, closed-source custom filesystem formats to new, open-source, supported and maintained file and binary formats that allow for a greater information compression and inter-programming language data-structure sharing and interpretation through the use of Google's Protobuf data interface protocol. I highly encourage you to read more about Dan Fritchman's work .","title":"gdsfactory/gplugins/vlsir"},{"location":"#master-thesis-dissertation","text":"NOVA University of Lisbon & Delft University of Technology (Sep 2020 - Dec 2021) - \"On the Use of Image Processing for 3D Parasitic Resistance Networks Extraction in Integrated Circuits\" - Grade: 19/20","title":"Master Thesis Dissertation"},{"location":"#zero-if-fsk-rf-receiver-analog-front-end","text":"NOVA University of Lisbon (Sep - Dec 2020) - Designed in 0.13\u00b5m (MM/RF) UMC technology","title":"Zero-IF FSK RF Receiver Analog Front-End"},{"location":"#120-db-gain-low-voltage-09-v-supply-operational-transconductance-amplifier","text":"NOVA University of Lisbon (Sep - Nov 2020) - Designed in 0.13\u00b5m (MM/RF) UMC technology","title":"120 dB Gain, Low-Voltage (0.9 V supply) Operational Transconductance Amplifier"},{"location":"#66-db-gain-100-mhz-gbw-fully-differential-hybrid-telescopic-folded-cascode-amplifier","text":"NOVA University of Lisbon (Nov - Dec 2019) - Designed in 0.13\u00b5m (MM/RF) UMC technology","title":"66 dB Gain, 100 MHz GBW Fully-Differential Hybrid Telescopic-Folded Cascode Amplifier"},{"location":"#languages","text":"Portuguese: \u25cb \u25cb \u25cb \u25cb \u25cb English: \u25cb \u25cb \u25cb \u25cb \u25cb Spanish: \u25cb \u25cb \u25cb Dutch: \u25cb \u25cb","title":"\ud83c\udf0d Languages"},{"location":"#extra-curricular-activities","text":"","title":"\ud83c\udfad Extra-Curricular Activities"},{"location":"#pedagogical-committee-representative","text":"NOVA University of Lisbon (Nov 2019 - Jul 2021) - Electrical and Computers Engineering Department","title":"Pedagogical Committee Representative"},{"location":"#volunteer-work-refood-telheiras-lisbon","text":"Sep - Dec 2019 - Redistribution of food waste","title":"Volunteer Work \u2013 Refood Telheiras, Lisbon"},{"location":"#hobbies","text":"Reading and watching documentaries about History Electric Bass Guitar Half-Marathon Running Contributing to open-source EDA-CAD software","title":"\ud83c\udfa8 Hobbies"},{"location":"computational_electromagnetics/","text":"Coming soon...","title":"Computational Electromagnetics"},{"location":"computational_electromagnetics/#coming-soon","text":"","title":"Coming soon..."},{"location":"misc/","text":"This is a collection of interesting tools, sandboxes and projects I end up doing when I want to learn new things about programming (and more specifically scientific-programming), IC Design how EDA tools for IC design work and can be innovated. Hope you find something that you would like to try for yourself! Programming in C-lang with Jupyter Notebooks Introduction: Hello World! Start by writting your C-lang file: %%file hello_world.c #include <stdio.h> #include <stdlib.h> int main(int argc, char **argv) { printf(\"Hello World from C in Jupyter!\"); exit(0); } Overwriting hello_world.c Now, compile your C code. %%bash gcc --version Apple clang version 15.0.0 (clang-1500.3.9.4) Target: arm64-apple-darwin23.6.0 Thread model: posix InstalledDir: /Library/Developer/CommandLineTools/usr/bin Compiling the code with the: - -W or --Wall flag is useful, enabling a wide variety of usefull warnings - -Werror treats critical warnings as errors, to make your code bulletproof once debugged. %%bash gcc ./hello_world.c -g -Werror -o hello_world Now, we can finally execute our C code from Jupyter. %%bash ./hello_world Hello World from C in Jupyter! Testing the C program: Python scripting We can now take advantage of having a documentation system with shell and Python scripting capabilities to quickly develop input testing files to run multiple test cases against the C program. This effectively automates the unit testing of the C program. from itertools import permutations inputs = permutations([3, '+', 43]) with open('permutations.in', 'w') as testfile: def str_from_perm(perm: list) -> str: s = str(perm) s = s.replace('(', ''); s = s.replace(')', ''); s = s.replace(\"'\", ''); s = s.replace(',', '') return s + '\\n' [testfile.write(str_from_perm(perm)) for perm in inputs] %cat permutations.in 3 + 43 3 43 + + 3 43 + 43 3 43 3 + 43 + 3 %%file permutations.c #include <stdlib.h> #include <stdio.h> #include <string.h> #include <assert.h> char *expected_tokens[] = {\"3\", \"A\", \"+\", \"6\", \"43\", NULL}; int arg_in_expected_tokens(char *arg, char **tokens){ int found_token_chars = 0; for(char **it_token = tokens; *it_token != NULL; it_token++){ if(!strcmp(arg, *it_token)) return 1; } printf(\"Assertion Failed: %s not in [\", arg); for(char **it_token = tokens; *it_token != NULL; ++it_token) printf(\"%s, \", *it_token); printf(\"]\\n\"); return 0; } int main(int argc, char **argv) { assert(argc>1); for(int i = 1; i < argc; i++) assert(arg_in_expected_tokens(argv[i], expected_tokens)); printf(\"Tests: Passed\\n\"); exit(0); } Overwriting permutations.c %%bash gcc ./permutations.c -g -Werror -o permutations Finally, use bash shell scripting to input all inputs, line by line, to the C programm, so that each test is verified. %%bash echo \"\" > permutations.out cat permutations.in | while read line do ./permutations $line >> permutations.out done %cat permutations.out Tests: Passed Tests: Passed Tests: Passed Tests: Passed Tests: Passed Tests: Passed If you're developing in Linux, you can even use Valgrind to automatically detect many memory management and threading bugs, and profile your programs in detail.","title":"Miscellaneous"},{"location":"misc/#programming-in-c-lang-with-jupyter-notebooks","text":"","title":"Programming in C-lang with Jupyter Notebooks"},{"location":"misc/#introduction-hello-world","text":"Start by writting your C-lang file: %%file hello_world.c #include <stdio.h> #include <stdlib.h> int main(int argc, char **argv) { printf(\"Hello World from C in Jupyter!\"); exit(0); } Overwriting hello_world.c Now, compile your C code. %%bash gcc --version Apple clang version 15.0.0 (clang-1500.3.9.4) Target: arm64-apple-darwin23.6.0 Thread model: posix InstalledDir: /Library/Developer/CommandLineTools/usr/bin Compiling the code with the: - -W or --Wall flag is useful, enabling a wide variety of usefull warnings - -Werror treats critical warnings as errors, to make your code bulletproof once debugged. %%bash gcc ./hello_world.c -g -Werror -o hello_world Now, we can finally execute our C code from Jupyter. %%bash ./hello_world Hello World from C in Jupyter!","title":"Introduction: Hello World!"},{"location":"misc/#testing-the-c-program-python-scripting","text":"We can now take advantage of having a documentation system with shell and Python scripting capabilities to quickly develop input testing files to run multiple test cases against the C program. This effectively automates the unit testing of the C program. from itertools import permutations inputs = permutations([3, '+', 43]) with open('permutations.in', 'w') as testfile: def str_from_perm(perm: list) -> str: s = str(perm) s = s.replace('(', ''); s = s.replace(')', ''); s = s.replace(\"'\", ''); s = s.replace(',', '') return s + '\\n' [testfile.write(str_from_perm(perm)) for perm in inputs] %cat permutations.in 3 + 43 3 43 + + 3 43 + 43 3 43 3 + 43 + 3 %%file permutations.c #include <stdlib.h> #include <stdio.h> #include <string.h> #include <assert.h> char *expected_tokens[] = {\"3\", \"A\", \"+\", \"6\", \"43\", NULL}; int arg_in_expected_tokens(char *arg, char **tokens){ int found_token_chars = 0; for(char **it_token = tokens; *it_token != NULL; it_token++){ if(!strcmp(arg, *it_token)) return 1; } printf(\"Assertion Failed: %s not in [\", arg); for(char **it_token = tokens; *it_token != NULL; ++it_token) printf(\"%s, \", *it_token); printf(\"]\\n\"); return 0; } int main(int argc, char **argv) { assert(argc>1); for(int i = 1; i < argc; i++) assert(arg_in_expected_tokens(argv[i], expected_tokens)); printf(\"Tests: Passed\\n\"); exit(0); } Overwriting permutations.c %%bash gcc ./permutations.c -g -Werror -o permutations Finally, use bash shell scripting to input all inputs, line by line, to the C programm, so that each test is verified. %%bash echo \"\" > permutations.out cat permutations.in | while read line do ./permutations $line >> permutations.out done %cat permutations.out Tests: Passed Tests: Passed Tests: Passed Tests: Passed Tests: Passed Tests: Passed If you're developing in Linux, you can even use Valgrind to automatically detect many memory management and threading bugs, and profile your programs in detail.","title":"Testing the C program: Python scripting"},{"location":"signal_converters/","text":"Coming soon...","title":"Signal-Converters"},{"location":"signal_converters/#coming-soon","text":"","title":"Coming soon..."}]}